@startuml

title Neighbour Discovery Class Diagram



class Neighbour {
	-m_nodeId : std::string
	-m_nodeAddress : std::string
	-m_nodePort : uint16_t
	-m_lastActivity : time_point
	+Neighbour(nodeId : std::string, nodeAddress : std::string, nodePort : uint16_t)
	+~Neighbour()
	+getNodeId() : std::string
	+getNodeAddress() : std::string
	+getNodePort() : uint16_t
	+getElapsedActivityTime() : int
	+update(nodeAddress : std::string, nodePort : uint16_t) : void
	+operator==(neighbour : Neighbour) : bool
}

class NeighbourTable {
 	-m_neighbours : std::map<std::string, shared_ptr<Neighbour>>
 	-mutex : std::mutex
	+NeighbourTable()
	+~NeighbourTable()
	+update(nodeId : std::string, nodeAddress : std::string, nodePort : uint16_t) : Neighbour
	+clean(expirationTime: int) : void
	+getNeighbourIds() : std::vector<std::string*>
	+getNeighbour(nodeId : std::string ) : Neighbour
}

class NeighbourDiscovery {
	+{static}sendBeacons(config : Config) : void
	+{static}receiveBeacons(config : Config, neighbourTable : NeighbourTable) : void
	+{static}cleanNeighbours(config : Config, neighbourTable : NeighbourTable) : void
}

class Beacon {
	-m_nodeId : std::string
	-m_nodeAddress : std::string
	-m_nodePort : uint16_t
	-m_raw: std::string
	+{static} MAX_BEACON_SIZE = 1050 : int
	+Beacon(rawData : std::string)
	+Beacon(nodeId : std::string, nodeAddress : std::string, nodePort : uint16_t
	+~Beacon()
	+getRaw() : std::string
	+getNodeId() : std::string
	+getNodeAddress() : std::string
	+getNodePort() : uint16_t
}


NeighbourTable --> "0..n\n<i>m_neighbours</i>" Neighbour

@enduml