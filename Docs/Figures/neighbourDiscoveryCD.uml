@startuml

title Neighbour Discovery Class Diagram

class Table<T> {
  #m_values : std::map<std::string, shared_ptr<T>>
  #mutex : std::mutex
  +Table()
  +~Table()
  +update(value : shared_ptr<T>) : void
  +getValues() : std::vector<std::string>
  +getValue(name : std::string) : shared_ptr<T>
}

class Neighbour {
	-m_nodeId : std::string
	-m_nodeAddress : std::string
	-m_nodePort : uint16_t
	-m_lastActivity : time_point
	+Neighbour(nodeId : std::string, nodeAddress : std::string, nodePort : uint16_t)
	+~Neighbour()
	+getId() : std::string
	+getNodeAddress() : std::string
	+getNodePort() : uint16_t
	+getElapsedActivityTime() : int
	+update(neighbour : shared_ptr<Neighbour>) : void
	+operator==(neighbour : Neighbour) : bool
}

class NeighbourTable {
	+NeighbourTable()
	+~NeighbourTable()
	+clean(expirationTime: int) : void
}

class NeighbourDiscovery {
	#m_config : Config
	#m_neighbourTable : NeighbourTable
	+NeighbourDiscovery(config : Config, neighbourTable : NeighbourTable)
	-sendBeacons() : void
	#receiveBeacons() : void
	-cleanNeighbours() : void
}

class Beacon {
	-m_nodeId : std::string
	-m_nodeAddress : std::string
	-m_nodePort : uint16_t
	-m_raw: std::string
	+{static} MAX_BEACON_SIZE = 1050 : int
	+Beacon(rawData : std::string)
	+Beacon(nodeId : std::string, nodeAddress : std::string, nodePort : uint16_t
	+~Beacon()
	+getRaw() : std::string
	+getNodeId() : std::string
	+getNodeAddress() : std::string
	+getNodePort() : uint16_t
}


NeighbourTable --> "0..n\n<i>m_neighbours</i>" Neighbour
Table <|-- NeighbourTable

@enduml