@startuml

title Neighbour Discovery Class Diagram

class Neighbour {
	-m_nodeId : std::string
	-m_nodeAddress : std::string
	-m_nodePort : uint16_t
	-m_lastActivity : time_point
	+Neighbour(nodeId : std::string, nodeAddress : std::string, nodePort : short)
	+~Neighbour()
	+getNodeId() : std::string
	+getNodeAddress() : std::string
	+getNodePort() : uint16_t
	+getElapsedActivityTime() : int
	+update(nodeAddress : std::string, nodePort : short) : void
}

class NeighbourTable << (S,#FF7700) Singleton >> {
 	-{static} m_instance : NeighbourTable*
 	-m_neighbours : std::map<std::string, shared_ptr<Neighbour>>
	-NeighbourTable()
	+~NeighbourTable()
	+update(nodeId : std::string, nodeAddress : std::string, nodePort : short) : void
	+cleanNeighbours() : void
	+getInstance() : {static} NeighbourTable*
	+getNeighbours() : std::map<std::string, shared_ptr<Neighbour>>
}

class NeighbourDiscovery {
	-m_stop : atomic<bool>
	-m_testMode : atomic<bool>
	-m_config : ConfigLoader
	-m_neighbourCleanerThread : thread
	-m_sendBeaconsThread : thread
	-m_receiveBeaconsThread : thread
	+NeighbourDiscovery(&Configuration : ConfigLoader)
	+~NeighbourDiscovery()
	+sendBeacons() : void
	+receiveBeacons() : void
	+neighbourCleaner() : void
	+stop() : void
	+setTestMode(mode : bool) : void
}

class Beacon {
	-m_nodeId : std::string
	-m_nodeAddress : std::string
	-m_nodePort : short
	-m_raw: std::string
	+{static} MAX_BEACON_SIZE = 1050 : int
	+Beacon(rawBeacon : std::string)
	+Beacon(nodeId : std::string, nodeAddress : std::string, nodePort : short
	+~Beacon()
	+getRaw() : std::string
	+getNodeId() : std::string
	+getNodeAddress() : std::string
	+getNodePort() : uint16_t
}

NeighbourDiscovery ..> Beacon : <i>uses</i>
NeighbourTable "1" *-- "n" Neighbour
NeighbourDiscovery ..> NeighbourTable : <i>updates</i>

@enduml